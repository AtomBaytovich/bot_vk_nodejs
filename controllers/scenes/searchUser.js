const { _VK } = require("../../instance");
const { menuSearchUserKeyboard, menuKeyboard, backTmpKeyboard } = require("../../utils/buttons");
const { menuText } = require("../../utils/text");
const userManagers = require("../userManagers");
const haversine = require('haversine-distance')

const stepMain = async (context) => {

    if (context.scene.step.firstTime || !context.text) {

        const user = await userManagers.get({ id: context.peerId });
        if (!user) return;
        const {
            id,
            age,
            interestingGender,
            geo
        } = user;

        const userFindRandom = await userManagers.getRandomUser({
            myId: id,
            age,
            gender: interestingGender,
            city: geo.city
        });
        /// –∑–∞—â–∏—Ç–∞ –Ω–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–Ω–æ—Å—Ç—å 
        if (!userFindRandom) {
            await context.scene.leave();
            return context.send(`–£–ø—Å... –ö–∞–∂–µ—Ç—Å—è –≤—Å–µ –∞–Ω–∫–µ—Ç—ã –≤ –ø–æ —Ç–≤–æ–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å! 
            –ü–æ–¥–æ–∂–¥–∏ –ø–æ–∫–∞ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ –∏–ª–∏ —Ç—ã –º–æ–∂–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞ –¥—Ä—É–≥–∏–µ!
            
            ${menuText}`, {
                keyboard: menuKeyboard
            })
        }

        context.scene.state.userFind = {
            id: userFindRandom.id,
            name: userFindRandom.name,
            photos: userFindRandom.photos,
            desc: userFindRandom.desc,
            age: userFindRandom.age,
            gender: userFindRandom.gender,
            geo: userFindRandom.geo
        };

        let kmText = ``;
        let kmFunc = haversine(
            {
                latitude: userFindRandom.geo.coord.lat,
                longitude: userFindRandom.geo.coord.lon
            },
            {
                latitude: geo.coord.lat,
                longitude: geo.coord.lon
            }
        )

        if (kmFunc > 0) {
            if (kmFunc < 1000) {
                kmText = `, üìç ${String(kmFunc).split('.')[0]}–º`
            } else {
                kmText = `, üìç ${Math.round(kmFunc / 1000)}–∫–º`
            }
        }

        return context.send({
            message: `${userFindRandom.name}, ${userFindRandom.age}, ${userFindRandom.geo.city}${kmText}\n${userFindRandom.desc}`,
            attachment: userFindRandom.photos[0],
            keyboard: menuSearchUserKeyboard(context.scene.state.userFind.id)
        });
    }

    if (!context.messagePayload?.command) return context.send('–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞');

    if (context.messagePayload.command == 'like') {
        // –ª–∞–π–∫–∞–µ–º , –≥–æ–≤–æ—Ä–∏–º —Ç–æ–º—É —é–∑–µ—Ä—É –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º  –Ω–æ–≤—ã–π –ø–æ–¥–±–æ—Ä
        await userManagers.likeDislikeUser({ type: 'like', whoLiked: context.peerId, whoLikedIt: context.scene.state.userFind.id })
    }

    if (context.messagePayload.command == 'message') {
        // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ª–∞–π–∫–∞–µ–º
        return await context.scene.step.next();
    }

    if (context.messagePayload.command == 'unlike') {
        // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–¥–±–æ—Ä
        await userManagers.likeDislikeUser({ type: 'dislike', whoLiked: context.peerId, whoLikedIt: context.scene.state.userFind.id })
    }

    if (context.messagePayload.command == 'sleep') {
        await context.scene.leave();
        return context.send(`
–ü–æ–¥–æ–∂–¥–µ–º –ø–æ–∫–∞ –∫—Ç–æ-—Ç–æ —É–≤–∏–¥–∏—Ç —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É

${menuText}
        `, {
            keyboard: menuKeyboard
        })
    }

    await context.scene.leave();
    return context.scene.enter('searchUser');
}


const stepMessage = async (context) => {
    const text = context.text;
    if (context.scene.step.firstTime || !context.text) return context.send({
        message: `–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`,
        keyboard: backTmpKeyboard
    });

    if (context.messagePayload?.command == 'back') return await context.scene.step.previous();

    if (text.length < 5) return context.send('–ß—Ç–æ —Ç–∞–∫ –º–∞–ª–æ –Ω–∞–ø–∏—Å–∞–ª? –î–∞–≤–∞–π –±–æ–ª—å—à–µ!');
    if (text.length > 1000) return context.send(`–§–∏–≥–∞ –∫–∞–∫ –º–Ω–æ–≥–æ... –£–±–µ—Ä–∏ ${text.length - 1000} —Å–∏–º–≤–æ–ª–æ–≤!`);

    await userManagers.likeDislikeUser({
        type: 'like',
        whoLiked: context.peerId,
        whoLikedIt: context.scene.state.userFind.id,
        message: text
    })

    return await context.scene.step.previous();
}



const searchUserScene = [stepMain, stepMessage];

module.exports = searchUserScene;